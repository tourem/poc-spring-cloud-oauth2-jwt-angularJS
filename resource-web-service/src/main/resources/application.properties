#data source properties
spring.datasource.url=jdbc:h2:mem:spring_boot_oauth2
spring.datasource.username=
spring.datasource.password=
spring.datasource.dataSourceClassName=org.h2.jdbcx.JdbcDataSource
spring.datasource.schema=classpath:/sql/schema.sql
spring.datasource.data=classpath:/sql/data.sql
#spring.datasource.driverClassName=com.mysql.jdbc.Driver

# JPA properties
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.database=H2
spring.jpa.openInView=false
spring.jpa.show_sql=true
spring.jpa.generate-ddl=false
spring.jpa.hibernate.ddl-auto=none

#web server
server.port=9191
#server.contextPath=/api

#Application specific
authentication.oauth.clientid=rajithapp
authentication.oauth.secret=secret
authentication.oauth.tokenValidityInSeconds=1800

feign.oauth2.enabled=true
product.host.service=http://product.docker.localhost
#product.host.service=http://localhost:8091
# In the RS module, in its application.yml file, we can set the
# endpoint for getting the public key of the certificate used to sign the token: ==> dépendance forte avec le service d'auth (impossible de démarrer sans auth)
#security.oauth2.resource.jwt.keyUri= http://localhost:8280/oauth/token_key
# to decode a JWT token locally, where the key is a verification key. The verification key value is either a symmetric secret or PEM-encoded RSA public key. If you don’t have the key and it’s public you can provide a URI where it can be downloaded (as a JSON object with a "value" field) with spring.oauth2.resource.jwt.keyUri
#security.oauth2.resource.jwt.keyValue:

spring.application.name: web-server
#products-service.ribbon.listOfServers=localhost:8091
#ribbon.eureka.enabled= false
#eureka.client.serviceUrl.defaultZone=http://127.0.0.1:8761/eureka/
#eureka.instance.leaseRenewalIntervalInSeconds= 10
#eureka.instance.metadataMap.instanceId= ${spring.application.name}:${spring.application.instance_id:${server.port}:${random.value}}


security.oauth2.client.clientId=web-server
security.oauth2.client.clientSecret= secret
#security.oauth2.client.accessTokenUri=http://localhost:8280/oauth/token
security.oauth2.client.accessTokenUri=http://localhost:8765//api/auth-service/oauth/token
security.oauth2.client.grant-type=client_credentials
security.oauth2.client.scope=service
security.oauth2.client.authenticationScheme=header
#security.oauth2.resource.tokenInfoUri=http://localhost:8280/oauth/check_token
security.oauth2.resource.tokenInfoUri=http://localhost:8765/api/auth-service/oauth/check_token
#security.oauth2.resource.userInfoUri=
#security.oauth2.resource.jwt.key-uri=http://localhost:8765//api/auth-service/oauth/token_key
security.oauth2.resource.filter-order= 3





