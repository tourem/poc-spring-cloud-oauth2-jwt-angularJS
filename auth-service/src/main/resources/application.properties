#data source properties
spring.datasource.url=jdbc:h2:mem:spring_boot_oauth2
spring.datasource.username=
spring.datasource.password=
spring.datasource.dataSourceClassName=org.h2.jdbcx.JdbcDataSource
spring.datasource.schema=classpath:/sql/schema.sql
spring.datasource.data=classpath:/sql/data.sql
#spring.datasource.driverClassName=com.mysql.jdbc.Driver

# JPA properties
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.database=H2
spring.jpa.openInView=false
spring.jpa.show_sql=true
spring.jpa.generate-ddl=false
spring.jpa.hibernate.ddl-auto=none

#web server
server.port=8280
#server.contextPath=/api

#Application specific
authentication.oauth.clientid=rajithapp
authentication.oauth.secret=secret
authentication.oauth.tokenValidityInSeconds=1800

# In the RS module, in its application.yml file, we can set the endpoint for getting the public key of the certificate used to sign the token:
#security.oauth2.resource.jwt.keyUri= http://localhost:8080/api/oauth/token_key


spring.application.name: auth-service
eureka.client.serviceUrl.defaultZone=http://127.0.0.1:8761/eureka/
eureka.instance.leaseRenewalIntervalInSeconds= 10
eureka.instance.metadataMap.instanceId= ${spring.application.name}:${spring.application.instance_id:${server.port}:${random.value}}